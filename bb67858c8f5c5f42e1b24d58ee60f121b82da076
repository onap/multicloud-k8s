{
  "comments": [
    {
      "key": {
        "uuid": "daa5f00d_ec920fcd",
        "filename": "kud/hosting_providers/vagrant/cleanup.sh",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 5550
      },
      "writtenOn": "2020-01-29T06:24:06Z",
      "side": 1,
      "message": "\"$2\" argument of script is not visible in function, as you pass only single parameter when invoking it ($1). If you want to provide all input parameters, you should invoke function like `_clean_docker \"$@\"`",
      "range": {
        "startLine": 20,
        "startChar": 38,
        "endLine": 20,
        "endChar": 40
      },
      "revId": "bb67858c8f5c5f42e1b24d58ee60f121b82da076",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2220aa72_a5ec4ad2",
        "filename": "kud/hosting_providers/vagrant/cleanup.sh",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 5550
      },
      "writtenOn": "2020-01-29T06:24:06Z",
      "side": 1,
      "message": "No need for subshell execution (\"()\") here as far as I see",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 1
      },
      "revId": "bb67858c8f5c5f42e1b24d58ee60f121b82da076",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a865c83_68caeb1c",
        "filename": "kud/hosting_providers/vagrant/cleanup.sh",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 5550
      },
      "writtenOn": "2020-01-29T06:24:06Z",
      "side": 1,
      "message": "I\u0027m not convinced there is a need to use such \"fragile\" regexp here, what do you want to match for containers/image selection - container and image name and something else? Maybe it would be more robust to use --filter or --format options to `docker ps`",
      "range": {
        "startLine": 20,
        "startChar": 44,
        "endLine": 20,
        "endChar": 72
      },
      "revId": "bb67858c8f5c5f42e1b24d58ee60f121b82da076",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8aa3b698_6d3e493b",
        "filename": "kud/hosting_providers/vagrant/cleanup.sh",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 5550
      },
      "writtenOn": "2020-01-29T06:25:38Z",
      "side": 1,
      "message": "Ok, sorry, subshell is fine, didn\u0027t notice \"\u0026\u0026\\\" at the end of line. But in case you have such long expression I\u0027d suggest to handle it with\n```\nif !docker ...; then\necho\nelse\ndocker ...\nfi\n```",
      "parentUuid": "2220aa72_a5ec4ad2",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 1
      },
      "revId": "bb67858c8f5c5f42e1b24d58ee60f121b82da076",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "547e2a1a_bf1758d8",
        "filename": "kud/hosting_providers/vagrant/cleanup.sh",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 5033
      },
      "writtenOn": "2020-01-29T22:46:48Z",
      "side": 1,
      "message": "Hi Konrad, thank you for reviewing this. I completely missed this. Was testing out single line argument for ansible and overlooked updating docker\u0027s arguments. I think I\u0027ll use $@ to expand the command line arguments.",
      "parentUuid": "daa5f00d_ec920fcd",
      "range": {
        "startLine": 20,
        "startChar": 38,
        "endLine": 20,
        "endChar": 40
      },
      "revId": "bb67858c8f5c5f42e1b24d58ee60f121b82da076",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1999fca_56383302",
        "filename": "kud/hosting_providers/vagrant/cleanup.sh",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 5033
      },
      "writtenOn": "2020-01-29T22:46:48Z",
      "side": 1,
      "message": "Can you elaborate, please? I am trying to list out the image name based on the command line argument {image name} supplied. Ex:  docker images | grep \"nginx/\\|/nginx \\|nginx \\|nginx \\|nginx-\\|nginx_\" | awk \u0027{print $3}\u0027 - Lists image -ID.\nWhat could potentially cause an issue in this type of approach?",
      "parentUuid": "4a865c83_68caeb1c",
      "range": {
        "startLine": 20,
        "startChar": 44,
        "endLine": 20,
        "endChar": 72
      },
      "revId": "bb67858c8f5c5f42e1b24d58ee60f121b82da076",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81535fb1_f1261eaf",
        "filename": "kud/hosting_providers/vagrant/cleanup.sh",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 5550
      },
      "writtenOn": "2020-01-30T10:15:11Z",
      "side": 1,
      "message": "Yes, sure. What I\u0027m afraid of, is that with this approach, you could match by accident an entry that is not supposed to be matched. For example if you\u0027re running this function with \"nginx\" as $2, I guess you want to remove both all containers  and images matching image \"nginx\" at any version or image \"nginx-*\"/\"nginx_*\"/... at any version. Let\u0027s now consider we have some container running image nginx, but also some other that is running command \"abc -f nginx.conf ...\". As default output from `docker ps` includes truncated command, you could by accident match container that was not supposed to be killed. Now, by using `docker ps --format` you can explicitly say what columns you want to see and then, based on it prepare relevant parser. For example, if I wanted to check whether container name or image matches pattern \"*mongo*\", I could define following pipeline:\n```\ndocker ps -a --format \"{{.Image}} {{.Names}} {{.ID}}\" | awk -v match\u003d\"$2\" \u0027$0 ~ match {print $3}\u0027\n```\nIt all actually depends on what you want to match against, but using format you can have much better prepared output to later search through.\nI\u0027m not sure if I helped with this explaination, but I hope you can see my concern.",
      "parentUuid": "d1999fca_56383302",
      "range": {
        "startLine": 20,
        "startChar": 44,
        "endLine": 20,
        "endChar": 72
      },
      "revId": "bb67858c8f5c5f42e1b24d58ee60f121b82da076",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f734a43d_cc9060f1",
        "filename": "kud/hosting_providers/vagrant/cleanup.sh",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 5550
      },
      "writtenOn": "2020-01-29T06:24:06Z",
      "side": 1,
      "message": "This is as far as I\u0027m aware already implemented as `docker image prune`, please check if it provides required functionality. If not, I\u0027d suggest to use --format for `docker images` as suggested above.",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 114
      },
      "revId": "bb67858c8f5c5f42e1b24d58ee60f121b82da076",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "083df6c6_df9803d7",
        "filename": "kud/hosting_providers/vagrant/cleanup.sh",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 5033
      },
      "writtenOn": "2020-01-29T22:46:48Z",
      "side": 1,
      "message": "I agree with your approach. Will update it to \ndocker prune -a",
      "parentUuid": "f734a43d_cc9060f1",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 114
      },
      "revId": "bb67858c8f5c5f42e1b24d58ee60f121b82da076",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}